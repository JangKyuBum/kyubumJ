3) 반복 데이터 조회
반복 데이터는 데이터가 반복해서 나오는 구조를 말합니다. 예를 들어, 그림 11.24는 코스닥 시장의 각 종목에 대한 종목 단축 코드, 종목 확장 코드, ETF 구분 등과 같은 데이터를 보여줍니다. xingAPI에서는 이러한 형태의 데이터를 반복 데이터라고 하며, Occurs라는 용어로 부릅니다. 참고로 Occurs라는 단어는 프로그래밍 언어 중 COBOL에서 나온 단어라고 합니다.
xingAPI의 TR 코드 중 어떤 것이 단일 데이터이고 어떤 것이 반복 데이터인가를 구분하기 위해서는 그림 11.25와 같이 DevCenter에서 TR 속성 창의 Occurs 여부를 확인하면 됩니다. 여기에 동그라미 표시가 있다면 반복 데이터를 의미합니다.


xingAPI를 이용한 반복 데이터 조회는 기본적으로 단일 데이터 조회와 큰 차이가 없습니다. 이번 절에서는 주식 종목 조회를 위한 TR 코드인 t8430을 사용해 반복 데이터를 조회하는 기본적인 방법을 살펴보겠습니다.

반복 데이터를 조회할 때도 기본적으로 그림 11.21의 순서대로 프로그램을 작성하면 됩니다. 먼저 이벤트 처리를 위한 클래스를 정의합니다.

이벤트 처리를 위한 클래스를 정의했다면 XAQuery 클래스에 대한 인스턴스를 생성하고 해당 인스턴스에 t8430 TR 코드에 해당하는 Res 파일을 등록합니다.

instXAQueryT8430 = win32com.client.DispatchWithEvents("XA_DataSet.XAQuery", XAQueryEventHandlerT8430)
instXAQueryT8430.ResFileName = "C:\\eBEST\\xingAPI\\Res\\t8430.res"
SetFieldData 메서드를 사용해 입력 데이터를 설정할 때는 그림 11.26과 같이 DevCenter에서 t8430에 대한 입력 블록명 및 필드명을 참조합니다.
그림 11.26 t8430 TR 코드의 입/출력 블럭명 및 필드명

그림 11.26을 참조하면 입력 블록명은 t8430InBlock이고 입력에 사용되는 필드명은 gubun만 존재하는 것을 알 수 있습니다. gubun은 한글 ‘구분’의 발음을 그대로 변수명으로 사용한 것으로서 1을 입력하면 코스피(유가증권시장), 2를 입력하면 코스닥(코스닥시장), 0을 입력하면 전체 시장을 의미합니다. 유가증권시장의 종목명을 구하려면 다음과 같이 입력 데이터를 설정하면 됩니다.

instXAQueryT8430.SetFieldData("t8430InBlock", "gubun", 0, 1)
입력 데이터를 설정했다면 서버에 TR을 요청한 후 이벤트가 발생할 때까지 대기합니다.

instXAQueryT8430.Request(0)

while XAQueryEventHandlerT8430.query_state == 0:
    pythoncom.PumpWaitingMessages()
TR에 대한 완료 이벤트가 발생했다면 데이터를 가져오면 됩니다. 이때 반복 데이터를 조회하려면 단일 데이터 조회와 달리 데이터의 총 개수를 먼저 구해야 합니다.

뭔가 복잡해 보이지만 그림 11.27과 같이 엑셀에서 각 행 단위로 접근해서 데이터를 구하는 것과 비슷합니다. 그림 11.27의 데이터를 기준으로 설명해보면 데이터의 총 개수는 5가 될 것입니다. 따라서 0~4까지의 인덱스를 통해 각 행에 해당하는 데이터를 구할 수 있습니다.

반복 데이터의 총 개수를 구하려면 GetBlockCount 메서드를 사용하고, 각 인덱스에 해당하는 데이터를 가져올 때는 앞서 살펴본 GetFieldData 메서드를 사용합니다. 다만 단일 데이터와 달리 3번째 파라미터에 반복 데이터의 인덱스를 지정하면 됩니다.

count = instXAQueryT8430.GetBlockCount("t8430OutBlock")

for i in range(5):
    hname = instXAQueryT8430.GetFieldData("t8430OutBlock", "hname", i)
    shcode = instXAQueryT8430.GetFieldData("t8430OutBlock", "shcode", i)
    expcode = instXAQueryT8430.GetFieldData("t8430OutBlock", "expcode", i)
    etfgubun = instXAQueryT8430.GetFieldData("t8430OutBlock", "etfgubun", i)
    print(i, hname, shcode, expcode, etfgubun)
위 코드는 0~4번 인덱스에 해당하는 유가증권시장 종목에 대한 종목명(hname), 단축코드(shcode), 확장코드(expcode), ETF 구분(etfgubun)을 출력합니다.

예제 11.4는 t8430 TR 코드를 이용해 반복 데이터를 조회하는 전체 코드입니다. 반복 데이터를 조회하는 코드는 단일 데이터를 조회하는 코드와 비슷합니다. 단지 GetBlockCount 메서드를 사용해 데이터의 총 개수를 가져오고 GetFieldData 메서드에서 데이터 인덱스를 입력해서 데이터를 가져온다는 점만 다릅니다.

import win32com.client
import pythoncom

class XASessionEventHandler:
    login_state = 0

    def OnLogin(self, code, msg):
        if code == "0000":
            print("로그인 성공")
            XASessionEventHandler.login_state = 1
        else:
            print("로그인 실패")

class XAQueryEventHandlerT8430:
    query_state = 0

    def OnReceiveData(self, code):
        XAQueryEventHandlerT8430.query_state = 1


# ----------------------------------------------------------------------------
# login
# ----------------------------------------------------------------------------
id = "id"
passwd = "passwd"
cert_passwd = "cert"

instXASession = win32com.client.DispatchWithEvents("XA_Session.XASession", XASessionEventHandler)
instXASession.ConnectServer("hts.ebestsec.co.kr", 20001)
instXASession.Login(id, passwd, cert_passwd, 0, 0)

while XASessionEventHandler.login_state == 0:
    pythoncom.PumpWaitingMessages()


# ----------------------------------------------------------------------------
# T8430
# ----------------------------------------------------------------------------
instXAQueryT8430 = win32com.client.DispatchWithEvents("XA_DataSet.XAQuery", XAQueryEventHandlerT8430)
instXAQueryT8430.ResFileName = "C:\\eBEST\\xingAPI\\Res\\t8430.res"

instXAQueryT8430.SetFieldData("t8430InBlock", "gubun", 0, 1)
instXAQueryT8430.Request(0)

while XAQueryEventHandlerT8430.query_state == 0:
    pythoncom.PumpWaitingMessages()

count = instXAQueryT8430.GetBlockCount("t8430OutBlock")
for i in range(5):
    hname = instXAQueryT8430.GetFieldData("t8430OutBlock", "hname", i)
    shcode = instXAQueryT8430.GetFieldData("t8430OutBlock", "shcode", i)
    expcode = instXAQueryT8430.GetFieldData("t8430OutBlock", "expcode", i)
    etfgubun = instXAQueryT8430.GetFieldData("t8430OutBlock", "etfgubun", i)
    print(i, hname, shcode, expcode, etfgubun)
예제 11.4 반복 데이터 조회(t8430 TR 코드)(소스코드: book/ch11/08.py)

예제 11.4의 코드를 PyCharm에서 실행하면 다음과 같이 0~4번에 해당하는 유가증권시장의 종목 데이터가 출력되는 것을 확인할 수 있습니다.

C:\Anaconda3\python.exe E:/GitHub/book/ch11/08(ex04).py
로그인 성공
0 동화약품 000020 KR7000020008 0
1 우리은행 000030 KR7000030007 0
2 KR모터스 000040 KR7000040006 0
3 경방 000050 KR7000050005 0
4 메리츠화재 000060 KR7000060004 0

Process finished with exit code 0