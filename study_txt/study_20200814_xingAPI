2) 단일 데이터 조회하기
앞 절에서 DevCenter를 이용해 t1102이라는 TR 코드의 동작 및 입/출력 값을 살펴봤습니다. 이번 절에서는 xingAPI를 이용해 해당 기능을 수행하는 코드를 작성해보겠습니다. 참고로 t1102 TR 코드와 같이 값(종목 코드)을 한번 전송해서 결괏값을 한번 얻어오는 방식을 단일 데이터 조회라고 합니다.

그림 11.21은 XAQuery 클래스를 이용해 단일 데이터를 조회하는 순서를 나타낸 것입니다. XAQuery 클래스를 사용할 때도 발생하는 이벤트를 처리하기 위한 클래스를 먼저 구현해야 합니다(단계 1). 그리고 XAQuery 클래스에 대한 인스턴스를 생성합니다(단계 2).

xingAPI는 대신증권의 CYBOS Plus와 달리 클래스의 수가 많지 않습니다. 대신 요청하는 데이터나 작업을 TR 코드를 통해 구분하기 때문에 앞서 내려받은 Res 파일을 XAQuery 클래스의 인스턴스에 등록해야 합니다(단계 3).

XAQuery 클래스의 메서드인 SetFieldData 메서드를 통해 요청하려는 데이터나 작업을 위한 입력값을 적절히 설정한 후(단계 4) Request 메서드를 통해 서버에 요청합니다(단계 5).

서버에 요청한 작업은 서버가 해당 작업을 처리한 후 이벤트를 통해 알려줄 때까지는 완료된 것이 아닙니다. 따라서 서버로부터 작업 완료에 대한 이벤트가 올 때까지 대기해야 합니다(단계 6).

서버로부터 요청한 작업에 대한 완료 이벤트를 받았다면 XAQuery 클래스의 ReceiveData 메서드를 통해 데이터를 받아오면 됩니다(단계 7).

XAQuery 클래스를 처음 사용해보기 때문에 아직 순서가 잘 이해되지 않을 수 있습니다. 처음부터 이러한 순서를 외우려 하기보다는 각 순서의 흐름을 이해하면 되겠습니다.

그림 11.21에서 설명한 순서대로 코드를 구현해보겠습니다. 맨 먼저 해야 할 일은 서버로부터 발생하는 이벤트를 처리할 클래스를 구현하는 것입니다. xingAPI COM 개발 가이드를 참조하면 XAQuery 클래스에 대한 이벤트는 그림 11.22와 같이 ReceiveData를 사용하는 것을 알 수 있습니다. 즉, 서버는 XAQuery 인스턴스가 요청한 작업을 처리한 후 ReceiveData 메서드를 콜백함으로써 해당 프로그램에 작업 완료 여부를 통지합니다.


그림 11.22 XAQuery 객체의 ReceiveData 이벤트 (xingAPI 개발가이드)

t1102 TR 코드에 대한 이벤트를 처리할 클래스이므로 클래스 이름을 XAQueryEventHandlerT1102로 지정했습니다. 그리고 query_state라는 이름의 클래스 변수를 사용해 이벤트 처리 여부를 저장합니다. 예를 들어, 서버에 요청한 작업이 완료되면 서버는 OnReceiveData 메서드를 호출하게 되며, 이에 따라 query_state의 값이 1로 변경됩니다.

클래스 외부에서는 클래스 변수인 query_state를 통해 요청한 작업의 완료 여부를 확인할 수 있습니다.

class XAQueryEventHandlerT1102:
    query_state = 0

    def OnReceiveData(self, code):
        XAQueryEventHandlerT1102.query_state = 1
이벤트 처리를 위한 클래스를 정의했다면 XAQuery 클래스의 인스턴스를 생성합니다. XASession 클래스의 인스턴스 생성과 마찬가지로 DispatchWithEvents 함수를 사용합니다.

instXAQueryT1102 = win32com.client.DispatchWithEvents("XA_DataSet.XAQuery", XAQueryEventHandlerT1102)
생성된 instXAQueryT1102 객체는 단순히 XAQuery 클래스에 대한 인스턴스일 뿐입니다. 따라서 해당 인스턴스를 통해 메서드를 호출했을 때 서버는 어떤 TR 요청인지 알 수 없습니다.

xingAPI에서는 각 요청 작업을 구분하기 위해 TR 코드를 사용하는데 해당 TR 코드에 대한 Res 파일을 앞서 생성한 클래스의 인스턴스에 등록함으로써 서버가 어떤 TR 요청을 받은 것인지를 구분할 수 있게 합니다.

Res 파일은 앞서 일괄적으로 다운로드했었는데 xingAPI 설치 경로를 변경하지 않았다면 다음과 같이 입력하면 됩니다. 여기서 파이썬에서 경로를 입력할 때 디렉터리의 구분은 '\' 또는 '/'를 사용해야 한다는 점에 주의합니다.

instXAQueryT1102.ResFileName = "C:\\eBEST\\xingAPI\\Res\\t1102.res"
TR 코드에 대한 Res 파일 등록을 완료했다면 요청할 작업에 필요한 입력 데이터를 설정합니다. 그림 11.23과 같이 DevCenter에서 t1102 TR 코드를 살펴보면 t1102InBlock이라는 블록명에 shcode라는 필드가 존재하는 것을 확인할 수 있습니다.

파이썬 코드로 입력 데이터를 설정하려면 XAQuery 인스턴스를 통해 SetFieldData라는 메서드를 호출한 후 적절한 인자 값을 지정하면 됩니다. SetFieldData의 1번째 파라미터는 블록명이고, 2번째 파라미터는 필드명입니다. 3번째 파라미터에는 단일 데이터를 조회할 때는 0을 지정하면 되고, 4번째 파라미터는 필드에 해당하는 입력값입니다.

instXAQueryT1102.SetFieldData("t1102InBlock", "shcode", 0, "078020")
요청할 작업에 필요한 데이터 입력이 완료되면 Request 메서드를 호출해서 입력 데이터를 서버로 전송합니다.

instXAQueryT1102.Request(0)
서버에 TR 요청을 했다면 해당 작업이 완료됐다는 이벤트를 받을 때까지 프로그램이 종료되지 않고 대기해야 합니다.

while XAQueryEventHandlerT1102.query_state == 0:
    pythoncom.PumpWaitingMessages()
이베스트투자증권의 서버는 TR 처리가 완료되면 OnReceiveData 메서드를 콜백합니다. 이로 인해 XAQueryEventHandlerT1102.query_state 값이 1로 변경되어 이벤트 대기 루프에서 빠져나오게 됩니다.

작업 완료 이벤트를 받은 후에는 GetFieldData 메서드를 사용해 t1102OutBlock 블록명과 원하는 필드명을 입력해 데이터를 가져올 수 있습니다. 예를 들어, "hname" 필드명을 지정하면 한글종목명을 가져올 수 있고, "price" 필드명을 지정하면 종목의 현재가를 가져올 수 있습니다.

name = instXAQueryT1102.GetFieldData("t1102OutBlock", "hname", 0)
price = instXAQueryT1102.GetFieldData("t1102OutBlock", "price", 0)
print(name)
print(price)
예제 11.3은 지금까지 설명한 내용을 하나의 파일로 구현한 코드입니다. 물론 해당 코드를 실행하기 위해서는 먼저 서버 접속 및 로그인이 필요하므로 이를 위한 코드도 함께 포함돼 있습니다.

import win32com.client
import pythoncom

class XASessionEventHandler:
    login_state = 0

    def OnLogin(self, code, msg):
        if code == "0000":
            print("로그인 성공")
            XASessionEventHandler.login_state = 1
        else:
            print("로그인 실패")

class XAQueryEventHandlerT1102:
    query_state = 0

    def OnReceiveData(self, code):
        XAQueryEventHandlerT1102.query_state = 1

# ----------------------------------------------------------------------------
# login
# ----------------------------------------------------------------------------
id = "id"
passwd = "passwd"
cert_passwd = "cert"

instXASession = win32com.client.DispatchWithEvents("XA_Session.XASession", XASessionEventHandler)
instXASession.ConnectServer("hts.ebestsec.co.kr", 20001)
instXASession.Login(id, passwd, cert_passwd, 0, 0)

while XASessionEventHandler.login_state == 0:
    pythoncom.PumpWaitingMessages()


# ----------------------------------------------------------------------------
# t1102
# ----------------------------------------------------------------------------
instXAQueryT1102 = win32com.client.DispatchWithEvents("XA_DataSet.XAQuery", XAQueryEventHandlerT1102)
instXAQueryT1102.ResFileName = "C:\\eBEST\\xingAPI\\Res\\t1102.res"
instXAQueryT1102.SetFieldData("t1102InBlock", "shcode", 0, "078020")
instXAQueryT1102.Request(0)

while XAQueryEventHandlerT1102.query_state == 0:
    pythoncom.PumpWaitingMessages()

name = instXAQueryT1102.GetFieldData("t1102OutBlock", "hname", 0)
price = instXAQueryT1102.GetFieldData("t1102OutBlock", "price", 0)
print(name)
print(price)
예제 11.3 단일 데이터 조회(t1102 TR 코드)(소스코드: book/ch11/06.py)

예제 11.3의 코드를 PyCharm을 통해 실행해 보면 다음과 같이 '078020'에 해당하는 종목의 한글 종목명과 해당 종목의 현재가가 화면에 출력되는 것을 확인할 수 있습니다.

C:\Anaconda3\python.exe F:/GitHub/book/ch11/06(ex03).py
로그인 성공
이베스트투자증권
9990

Process finished with exit code 0